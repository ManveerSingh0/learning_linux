* To Find files by their Size or Time  
#+BEGIN_SRC bash
  find . -type f or d -mtime -7 {here 7 means Days , f --> files , d --> Directory }
  find . -type f or d -size +10M {here 10M means megabytes}
  find . -type f -size +1M -delete --> to delete file of 1MB
  find . -emtpy -delete --> to delete the empy file
#+END_SRC


* Text file management
#+BEGIN_SRC bash
  head -n #{to specify first lines to show} 10 file.txt --> this will show first 10 lines of any text file
  less: use -N in less command to display line numbers and enter

  wc(word-count): use wc command to see wrods lines bytes of a files before opening it
	1. like wc -lwc files_name;
  du: show disk usage of folder && files; du -k to show usage in kbs or -h to show it in kb or mb

  send the error data to /dev/null to just simplify things up like this du -h file_name 2> /dev/null 


  # by default it sorts according to alphabets
  sort --> sort - r #(to reverse sort)
	     sort -n #(to sort according to numbers)
	     sort -c #(to check if file is sorted or not)
	     sort -k #column_number (to sort from column number) --> Column number are arrays of string like ["Manveer" , "Singh"] so here column number 2 defines sort -k 2 mean sort this by second
	     sort -u #file_name (to sort and remove duplicate ) 

  uniq --> #delete duplicates from sort like this sort file_name | uniq
	     uniq -d file_name #(to only find the duplicate in the file)

	     #grep shoudn't be use on *BINARY DATA*
  grep -F 'pattern' file_name #to find lines where pattern has been used;
  [command] | grep -F 'pattern' #same thing but with pipe

  #tr(translate)
  echo 'bash' | tr 'b' 'd' #this command replace character
  echo 'bash' | tr 'a-z' 'A-Z'
  echo 'Manveer Singh' | tr -d ' ' #-d to delete character

  #rev(reverse)
  echo "Manveer Singh" | rev 



  #To cut the bytes(character) to certain;
  cut -b 1-10 #this will cut from 1st character to 10th
  uptime | cut -b 1-10 #[starting_character] - [ending_character]
  uptime | cut -d ' ' -f 2 #this cut the string into " "(spaces) and then -f tell which array-string to select --> this assusme that you have spaces in the string


  #To replace string
  sed 's/[which_word]/[To_word]/g'
 
  #To modify the Path
  PATH="${PATH}:/new/path/"



  #TO change shell
  chsh -s "/bin/zsh" #chsh --> change shell

  #you can set alias
  alias gohome="cd ~"
  unalias gohome #to remove it from bash
  #alias don't work , when we give parameter like this
  ls='gohome' #alias are diable here




  #to enable feature using SET
  set - [feature]
  #to disable feature using set
  set + [feature]


  #alternative to set is shopt , to enable
  shopt -s [optioname]
  shopt -s autocd #add cd before the path
  shopt -s cdspell #correct spelling mistake in path 
  #to disable
  shopt -u [optioname]


  #another variable PS1 (Prompt String 1)
  echo "${PS1}" #By default [\u@\h \W\$]
  #Username: \u , Hostname [complete hostname]{\H} , [until "."]{\h}
  #Working directory \w(full path) , \W (last directory of the full path)
  #time 24 hour format: \t , 12 hour format \@


  #tell what type of terminal are availabe [default] --> xterm
  toe
  #TERM --> set terminal environment
  echo "{TERM}"


  #to change background and font color[ TERMINAL ESCAPE SEQUENCE]
  #           FG(For Ground) BG(Back Ground)
  echo -e "\e[36;41m"


  #tell all the escape sequences
  infocmp



  tput clear

  #to move cursor [verticaly] [horizontaly]
  tput cup 5 20

  #to create bold text
  tput bold
  #to reset file
  tput sgr0

  #to underline text
  tput smul / tput rmul

  #to setup color
  tput setaf [color] #foreground color
  tput setab [color] #background color

  #how many lines and columns in visibal space can tput show
  tput lines
  tput cols
  tput colors

  #to use it in echo command
  echo "$(tput bold) bold text $(tput sgr0)"


  #to add escape sequences in bash
  #use this \[ \]


  #to get the length of the string use # of a variable
  echo "${#HOME}"

  #you can specify from where to which string
  #          FROM  HOW MANY CHARACTERS   
  echo "${HOME:30:30}"


  #to replace string of variable
  #user single / to replace one occurence // to replace all
  echo "${HOME/home/users}" || echo "${HOME//home/users}"




  echo data.{csv , txt} # this will expend as data.csv  data.txt
  echo {A..Z} another way to imagine echo {START..END}



  #command substituion
  echo "`ls`" #this works same as
  echo "$(ls)"



  #simlinks
  ln -s /of/which/path /your/folder/name
  #to unlink it
  unlink folder_name || file_name

  #to create hardlink
  ln  /of/which/path /your/folder/name
  unlink folder_name;

  #Copy file by hardlink
  cp -al file_name #-a ensure that data will contain all the original metadata and l ensure that copy file will be hardlink


  #to see the amount of inodes are in use
  df -ih {i =  inodes h = human readable}
#+END_SRC


* Difference Between '' vs "";
1. '' disables all expension like *.txt etc
2. "" disables most of extension like *.txt but keep variable expension "${PWD}"


** Different type of pseudo Devices
1. /dev/null
2. /dev/random
3. /dev/urandom


 * You can see cpuinfo by cat /proc/cpuinfo *
 * Meminfo by cat /proc/meminfo *
 * version cat /proc/version *
 * uptime cat /proc/uptime *
 * load average /proc/loadavg  // tells how many cores we are using , how many  processes*

** So this is basically same
#+BEGIN_SRC bash
  [command] > file_name 2>&1 --> this &1 points to stdout , and we set it to file_name now it is pointing to file_name instead of terminal(default);
  [command] 2> file_name >&2 --> this does them same but &2 points to error instead of output
#+END_SRC




* Linux Manages infomation in different files
1. /etc/passwd --> _everything except password_
2. /etc/shadow --> _store password encrypted_ || also store other data too



* User Management
Use useradd command with these  
1. -m: Create Home Directory
2. -d: Set Custom Home Directory
3. -s: Specify Default Shell
4. -g: to specify primary group instead of default configuration
5. -G: add user to secondary groups
   
Use passwd with these to change password
1. -S: Display passwords status
2. -d: delete password
3. -n: set minimum password age(days)
4. -x: set maximum password age (days)
5. -l: Lock user account
6. -u: Unlock user account

Use usermod with these _need to go in different user to change these things_
1. -c: change user description (full name)
2. -s: change default shell
3. -d: change home directory
4. -l: change unix username
5. -g: change primary group
6. -G: change secondary groups
7. -ag: add secondary groups 

Use userdel command to delete existing user
 1. userdel [user_name]
2. -r remove directory + mails
3. -f do same of -r and force everything to delete


** To show user groups type
1. groups [username]
   

*** you will have to download these from package manager but in some distro these are available 
1. to add user group you can use adduser with sudo
   sudo adduser [user_name] [group]
2. to remove user group you can use deluser with sudo
   sudo deluser [user_name] [group]



1. To add groups use
   groupadd [options] groupname
   1. -g: option to set custom GID 
      example: groupadd -g 1005 newgroup
      the group info is then stored in the /etc/grouop file
2. groupmod [options] groupname
   -n: change the name of the group
   -g: change the group id (GID)

3. groupdel [group_name] , this will not delete the files created in it;
   this will not remove primary groups


** chmod Command
1. Permission levels: Owner(u) , Group (g) , Other(o)
2. Type Of Permissions: Read (r/4) , write(w/2) , execute(x/1)
   ;; You can use these numbers instead of rwx , like this
   chmod 754 file.txt
   1. first digit is for the owner: 7 = 4 + 2 + 1 => read , write , execute
   2. second digit is for the group: 5 = 4 + 1 => read , execute
   3. Third digit is for all others: 4 => Read
   4. chmod u+x file.txt (this will give owner the execute authority)
   5. chmod g-w file.txt (this will remove write permission from group)
   6. chmod o+r file.txt (this will give read premission to other)
3. File Permissiono For directories
   1. read(r): Access directory content
   2. write (w):Add or remove files
      1. we also need execute for this  
   3. execute (x) Enter and raverse directory
4. if you want to change permission for whole directory
   1. chmod 777 -R ./directory
   2. chown jannis:jannis -R ./directory
5. To set sticky bit
   1. chmod +t [folder]
   2. chmod 1777 [folder] //here 1 before 777 works as sticky bit
6. SUID = Set User ID
   1. This don't support .cpp .c{executable scripts}
   2. chmod u+s file
      1. Lowercase s: SUID bit + execute bit
      2. Uppercase S: Suid bit , but without execute bit
      

      

** chown
1. chown user:group file.txt


** Umask
1. 666 for files , subtract value from it
   777 for directories: Example umask 022 --> 666 - 022 -> 644 permission level
2. You can set umask in /etc/login.defs {default value is 022}

** Top
1. -u [username]: show only process owned by the spedified user
2. -d [seconds]: set the delay between display updates , in seconds
   default is 3 seconds
3. -i: processes only using CPU
4. -c: display the full command line used to ostart each process
5. f key: to customize normal top , using space key
   - Sort by mem usage by using s key on the specific process
6. k key: we can send signals to processes with the key (k = kill)
7. r key: to renice NI
8. z key: to make it colorfull
   or Shift


** PS
1. ps -A {All} , ps -e
   - show all process , from all uses and all sesions
2. ps -f:
   - show full format listing: show extended information ,
     such as user, terminal and parent process (PPID)
   - ps -ef: use it with  -e
3. ps -f {PID} || ps -p -f {PID}: to be more specific and to see only one process
4. ps -f --forest: show ascii character to make it more interesting(into resting hahaha)
5. ps -l: shows something more
6. pgrep [program] --> to find process ID only
   - pgrep -f firefox --> to show all PIDs of firefox and it's sub-processes
   - pgrep -f $(pgrep firefox) --> use it like this 

** How Multitasking Works
1. cat /proc/[process ID]/stats | grep ctxt --> single cpu core don't take multiple
   tasks at same time and complete it same time , it complete first and then second and so on
2. watch -n 0.5 grep -F "ctxt" /proc/12345/status
   
** Watch Command
1. watch -n 0.5 grep -F "ctxt" /proc/12345/status
   
** Niceness
1. -20 (highest priority) to +19 (lowest priority)
2. nice -n [niceness] {-20..19} [program]
3. renice -n {-20..19} [process ID] --> to change already running process

** Process
1. SIGINT (interrupt)
2. SIGHUP (hangup)
3. SIGWINCH (window change)
4. SIGTERM (terminate)
5. SIGKILL (kill process)
6. SIGILL (illegal instruction)
7. kill -s [Signal] [process-ID]
   

* Systemd
** Systemd
-- systemd-analyze --system unit-paths --> To find those paths 
1. /lib/systemd/system || /usr/lib/systemd/system --> system configuration
2. /run/systemd/system --> runtime configuration
3. /etc/systemd/system --> configuration for the administrator
4. systemctl cat [file_name{this will show any file from anywhere}]
5. systemctl list-units --> To display units
6. systemctl status [service]
7. systemctl {start , stop , restart , reload} [unit]

* Mount/drive
1. 

** Grub
1. sudo grub-mkconfig -o /boot/grub/grub.cfg --> to update grub bootloader in non-debain operating system
2. emacs /etc/default/grub --> to customize grub


- To list modules use sudo lsmod


* Bash Script
-- FUN FACT you can run script.jpeg file and write bash
in it and you can run it without any problem  


** Shebang
- #(sharp) + !(bang) = shebang
- #!/usr/bin/env bash --> To make portable
